// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  password         String
  fullName         String
  role             Role              @default(user)
  profileImage     String?
  contactNo        String
  gender           String?
  dob              String?
  isPasswordReset  Boolean
  reviewAndRatings ReviewAndRating[]
  bookings         Booking[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@map("users")
}

model Category {
  id        String    @id @default(uuid())
  title     String
  image     String?
  services  Service[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("categories")
}

model Slots {
  id        String    @id @default(uuid())
  slotTime  String    
  Booking  Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("slots")
}

model Service {
  id               String            @id @default(uuid())
  name             String
  subTitle         String[]
  description      Description[]
  price            Float
  image            String
  rating           Float
  categoryId       String
  trending          Boolean?
  category         Category          @relation(fields: [categoryId], references: [id])
  reviewAndRatings ReviewAndRating[]
  bookings         Booking[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@map("services")
}

model Description {
  id        String   @id @default(uuid())
  title     String
  subTitle  String[]
  service   Service  @relation(fields: [serviceId], references: [id])
  serviceId String
}

model ReviewAndRating {
  id        String   @id @default(uuid())
  review    String
  rating    Int
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("review_and_ratings")
}

model Booking {
  id        String   @id @default(uuid())
  userId    String
  serviceId String
  slotId  String
  date      String
  payment  Payment?
  status    Status   @default(pending)
  slots      Slots     @relation(fields: [slotId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  service   Service  @relation(fields: [serviceId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([slotId, serviceId,date])
  @@map("bookings")
}


model Payment {
  id            String   @id @default(uuid())
  amount        Float
  paymentDate   DateTime @default(now()) 
  paymentStatus String   
  createdAt     DateTime @default(now()) 
  updatedAt     DateTime @updatedAt 

  bookingId String      @unique
  bookings   Booking @relation(fields: [bookingId], references: [id])

  @@map("payments")
}



model Admin {
  id              String  @id @default(uuid())
  email           String  @unique
  password        String
  fullName        String
  role            Role
  profileImage    String?
  contactNo       String
  gender          String?
  dob             String?
  isPasswordReset Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

enum Role {
  admin
  user
  super_admin
}

enum Status {
  pending
  shipped
  delivered
}
